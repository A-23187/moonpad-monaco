// Generated by moon test.

typealias TestDriver_No_Args_Function = () -> Unit!Error

typealias TestDriver_With_Args_Function = (@moonbitlang/core/test.T) -> Unit!Error

typealias TestDriver_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (TestDriver_No_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

typealias TestDriver_With_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (TestDriver_With_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

fn typing_tests(
  x : @moonbitlang/core/builtin.Map[
    String,
    @moonbitlang/core/builtin.Array[
      (TestDriver_No_Args_Function, @moonbitlang/core/builtin.Array[String]),
    ],
  ]
) -> Unit {
  ignore(x)
}

fn typing_no_args_tests(x : TestDriver_No_Args_Map) -> Unit {
  ignore(x)
}

fn typing_with_args_tests(x : TestDriver_With_Args_Map) -> Unit {
  ignore(x)
}

struct TestDriver__Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

enum TestDriver__F {
  F0(TestDriver_No_Args_Function)
  F1(TestDriver_With_Args_Function)
}

struct TestDriver__TestCase {
  f : TestDriver__F
  meta : TestDriver__Meta
}

fn get_all_tests(
  no_args_tests : TestDriver_No_Args_Map,
  with_args_tests : TestDriver_With_Args_Map,
) -> @moonbitlang/core/builtin.Array[TestDriver__TestCase] {
  let ret = []
  no_args_tests
  .iter()
  .each(
    fn(file) {
      let filename = file.0
      let tests = file.1
      tests
      .iter()
      .each(
        fn(cases) {
          let index = cases.0
          let k = {
            f: TestDriver__F::F0(cases.1.0),
            meta: { filename, index, attrs: cases.1.1 },
          }
          ret.push(k)
        },
      )
    },
  )
  with_args_tests
  .iter()
  .each(
    fn(file) {
      let filename = file.0
      let tests = file.1
      tests
      .iter()
      .each(
        fn(cases) {
          let index = cases.0
          let k = {
            f: TestDriver__F::F1(cases.1.0),
            meta: { filename, index, attrs: cases.1.1 },
          }
          ret.push(k)
        },
      )
    },
  )
  ret
}

fn main {
  let tests = {  } // WILL BE REPLACED
  let no_args_tests = {  } // WILL BE REPLACED
  let with_args_tests = {  } // WILL BE REPLACED
  typing_tests(tests)
  typing_no_args_tests(no_args_tests)
  typing_with_args_tests(with_args_tests)
  let filtered_tests = get_all_tests(
    no_args_tests, with_args_tests
  )
  filtered_tests
  .iter()
  .each(
    fn(item) {
      let filename = item.meta.filename
      let attrs = item.meta.attrs
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        item.meta.index.to_string()
      } else {
        name
      }
      let f = match item.f {
        TestDriver__F::F0(f) => f
        TestDriver__F::F1(f) =>
          fn() {
            let it : @moonbitlang/core/test.T = {
              name,
              buffer: @moonbitlang/core/builtin.StringBuilder::new(),
            }
            f!(it)
          }
      }
      let message = try {
        f!()
        ""
      } catch {
        Failure(e) | InspectError(e) => e
        _ => "unexpected error"
      }
      println("{BEGIN_MOONTEST}")
      println(
        "{\"package\": \"{PACKAGE}\", \"filename\": \{filename.escape()}, \"test_name\": \{name.escape()}, \"message\": \{message.escape()}}",
      )
      println("{END_MOONTEST}")
    },
  )
}
